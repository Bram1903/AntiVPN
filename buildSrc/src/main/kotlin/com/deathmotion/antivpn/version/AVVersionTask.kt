/*
 * This file is part of AntiVPN - https://github.com/Bram1903/AntiVPN
 * Copyright (C) 2024 Bram and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.deathmotion.antivpn.version

import org.gradle.api.DefaultTask
import org.gradle.api.file.Directory
import org.gradle.api.provider.Provider
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.TaskAction

abstract class AVVersionTask : DefaultTask() {

    companion object {
        const val TASK_NAME = "generateVersionsFile"
    }

    @get:Input
    abstract var packageName: String

    @get:Input
    abstract var version: String

    @get:OutputDirectory
    abstract var outputDir: Provider<Directory>

    @TaskAction
    fun generate() {
        val dir = outputDir.get().dir(packageName.replace('.', '/'))
        dir.asFile.mkdirs()

        val file = dir.file("AVVersions.java").asFile
        if (!file.exists()) {
            file.createNewFile()
        }

        val ver = Version.fromString(version)
        logger.info("Generating AVVersions.java with version $ver")

        file.writeText("""
            /**
             * This file is generated by the auto-version task. Modifying it will have no effect.
             */
            package $packageName;
            
            import java.time.Instant;
            
            public final class AVVersions {
            
                public static final String RAW = "$version";
                public static final Instant BUILD_TIMESTAMP = Instant.ofEpochMilli(${System.currentTimeMillis()}L);
                public static final AVVersion CURRENT = new AVVersion(${ver.major}, ${ver.minor}, ${ver.patch}, ${ver.quotedSnapshotCommit()});
                public static final AVVersion UNKNOWN = new AVVersion(0, 0, 0);
                
                private AVVersions() {
                    throw new IllegalStateException();
                }
            }
        """.trimIndent())
    }

    private data class Version(
        val major: Int,
        val minor: Int,
        val patch: Int,
        val snapshotCommit: String?
    ) {
        companion object {
            private val REGEX = Regex("""(\d+)\.(\d+)\.(\d+)(?:\+([0-9a-f]+)-SNAPSHOT)?""")

            fun fromString(version: String): Version {
                val match = REGEX.matchEntire(version) ?: throw IllegalArgumentException("Invalid version: $version")
                return Version(
                    match.groupValues[1].toInt(),
                    match.groupValues[2].toInt(),
                    match.groupValues[3].toInt(),
                    match.groupValues[4].ifEmpty { null }
                )
            }
        }

        fun quotedSnapshotCommit(): String {
            if (snapshotCommit == null) {
                return "null"
            }
            return "\"$snapshotCommit\"";
        }
    }

}
